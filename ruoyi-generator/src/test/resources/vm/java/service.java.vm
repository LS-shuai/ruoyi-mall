package ${fullPackage};

import java.util.List;
import ${packageName}.model.entity.${ClassName};
import ${packageName}.pojo.query.${ClassName}Query;
import com.bryx.core.common.base.entity.IPageable;

/**
 * ${functionName}Service接口
 * 
 * @author ${author}
 */
public interface I${ClassName}Service {
    /**
     * 删除 ${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return 结果
     */
    int deleteByPrimaryKey(${pkColumn.javaType} ${pkColumn.javaField});

    /**
     * 根据主键，批量删除 ${functionName}
     *
     * @param ${pkColumn.javaField}s ${functionName}主键列表
     * @return 结果
     */
    int deleteByPrimaryKeys(List<${pkColumn.javaType}> ${pkColumn.javaField}s);

    /**
     * 新增${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    int insert(${ClassName} ${className});

    /**
     * 新增 或 修改 ${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    int insertOrUpdate(${ClassName} ${className});

    /**
     * 新增 或 修改 ${functionName}, 非空字段
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    int insertOrUpdateSelective(${ClassName} ${className});

    /**
     * 新增${functionName}, 非空字段
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    int insertSelective(${ClassName} ${className});

    /**
     * 根据主键，查询 ${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}
     */
     ${ClassName} selectByPrimaryKey(${pkColumn.javaType} ${pkColumn.javaField});

     /**
     * 根据条件，查询 ${functionName}
     *
     * @param query ${functionName}条件
     * @return ${functionName}
     */
     List<${ClassName}> selectByCondition(${ClassName}Query query);

     /**
     * 根据条件，分页查询 ${functionName}
     *
     * @param query ${functionName}条件
     * @return ${functionName}
     */
     List<${ClassName}> selectByCondition(${ClassName}Query query, IPageable page);

    /**
     * 根据主键修改${functionName}，过滤非空
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    int updateByPrimaryKeySelective(${ClassName} ${className});

    /**
     * 根据主键修改${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    int updateByPrimaryKey(${ClassName} ${className});

    /**
     * 根据主键批量修改${functionName}
     *
     * @param list ${functionName}列表
     * @return 结果
     */
    int updateBatch(List<${ClassName}> list);

    /**
     * 批量插入${functionName}
     *
     * @param list ${functionName}列表
     * @return 结果
     */
    int batchInsert(List<${ClassName}> list);
}
