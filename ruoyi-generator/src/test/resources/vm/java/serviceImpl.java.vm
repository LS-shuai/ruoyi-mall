package ${fullPackage};

import java.util.List;
#if($table.hasDate())
#foreach($date in $table.dateImports())
import $date;
#end
#end
import com.bryx.core.common.base.entity.IPageable;
import com.github.pagehelper.PageHelper;
import java.util.ArrayList;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import lombok.extern.slf4j.Slf4j;
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.model.entity.${ClassName};
import ${packageName}.pojo.query.${ClassName}Query;
import ${packageName}.pojo.dao.${ClassName}Example;
import ${packageName}.service.I${ClassName}Service;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 */
@Service
@Slf4j
public class ${ClassName}ServiceImpl implements I${ClassName}Service {
    @Autowired
    private ${ClassName}Mapper ${className}Mapper;


    @Override
    public int deleteByPrimaryKey(${pkColumn.javaType} ${pkColumn.javaField}) {
        return ${className}Mapper.deleteByPrimaryKey(${pkColumn.javaField});
    }

    @Override
    public int insert(${ClassName} ${className}) {
        return ${className}Mapper.insert(${className});
    }

    @Override
    public int insertOrUpdate(${ClassName} ${className}) {
        return ${className}Mapper.insertOrUpdate(${className});
    }

    @Override
    public int insertOrUpdateSelective(${ClassName} ${className}) {
        return ${className}Mapper.insertOrUpdateSelective(${className});
    }

    @Override
    public int insertSelective(${ClassName} ${className}) {
        return ${className}Mapper.insertSelective(${className});
    }

    @Override
    public ${ClassName} selectByPrimaryKey(${pkColumn.javaType} ${pkColumn.javaField}) {
        return ${className}Mapper.selectByPrimaryKey(${pkColumn.javaField});
    }

    @Override
    public int updateByPrimaryKeySelective(${ClassName} ${className}) {
        return ${className}Mapper.updateByPrimaryKeySelective(${className});
    }

    @Override
    public int updateByPrimaryKey(${ClassName} ${className}) {
        return ${className}Mapper.updateByPrimaryKey(${className});
    }

    @Override
    public int updateBatch(List<${ClassName}> list) {
        return ${className}Mapper.batchInsert(list);
    }

    @Override
    public int batchInsert(List<${ClassName}> list) {
        return ${className}Mapper.batchInsert(list);
    }

    @Override
    public List<${ClassName}> selectByCondition(${ClassName}Query ${className}) {
        ${ClassName}Example example = new ${ClassName}Example();
        return ${className}Mapper.selectByExample(example);
    }

    @Override
    public List<${ClassName}> selectByCondition(${ClassName}Query ${className}Query, IPageable pageable) {
        PageHelper.startPage(pageable.getPage(), pageable.getPageSize());
        ${ClassName}Example example = new ${ClassName}Example();
        return ${className}Mapper.selectByExample(example);
    }

    @Override
    public int deleteByPrimaryKeys(List<Long> ids) {
        ${ClassName}Example example = new ${ClassName}Example();
        example.createCriteria().andIdIn(ids);
        return ${className}Mapper.deleteByExample(example);
    }
}
