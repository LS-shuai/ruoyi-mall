package ${fullPackage};

import java.util.List;
import ${packageName}.model.entity.${ClassName};
import ${packageName}.pojo.dao.${ClassName}Example;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Mapper;

/**
 * ${functionName}Mapper接口
 * 
 * @author ${author}
 */
@Mapper
public interface ${ClassName}Mapper {
    /**
     * ${functionName}总数
     *
     * @param example 入参
     * @return 总数
     */
    long countByExample(${ClassName}Example example);

    /**
     * 根据条件批量删除${functionName}
     *
     * @param example 入参
     * @return 结果
     */
    int deleteByExample(${ClassName}Example example);

    /**
     * 根据主键删除${functionName}
     *
     * @param ${pkColumn.javaField} 主键
     * @return 结果
     */
    int deleteByPrimaryKey(${pkColumn.javaType} ${pkColumn.javaField});

    /**
     * 插入${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    int insert(${ClassName} ${className});

    /**
     * 插入或更新${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    int insertOrUpdate(${ClassName} ${className});

    /**
     * 插入或更新${functionName}非空属性
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    int insertOrUpdateSelective(${ClassName} ${className});

    /**
     * 插入${functionName}非空属性
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    int insertSelective(${ClassName} ${className});

    /**
     * 批量插入${functionName}
     *
     * @param list ${functionName}列表
     * @return 结果
     */
    int batchInsert(@Param("list") List<${ClassName}> list);

    /**
     * 根据条件查询${functionName}
     *
     * @param example 条件
     * @return 列表
     */
    List<${ClassName}> selectByExample(${ClassName}Example example);

    /**
     * 根据主键查询${functionName}
     *
     * @param ${pkColumn.javaField} 主键
     * @return ${functionName}
     */
    ${ClassName} selectByPrimaryKey(${pkColumn.javaType} ${pkColumn.javaField});

    /**
     * 根据条件批量更新${functionName}, 过滤非空属性
     *
     * @param ${className} 更新内容
     * @param example 条件
     * @return 结果
     */
    int updateByExampleSelective(@Param("record") ${ClassName} ${className}, @Param("example") ${ClassName}Example example);

    /**
     * 根据条件批量更新${functionName}
     *
     * @param ${className} 更新内容
     * @param example 条件
     * @return 结果
     */
    int updateByExample(@Param("record") ${ClassName} ${className}, @Param("example") ${ClassName}Example example);

    /**
     * 根据主键更新${functionName}
     *
     * @param ${className} 更新内容
     * @return 结果
     */
    int updateByPrimaryKeySelective(${ClassName} ${className});

    /**
     * 根据主键更新${functionName}
     *
     * @param ${className} 更新内容
     * @return 结果
     */
    int updateByPrimaryKey(${ClassName} ${className});
}
